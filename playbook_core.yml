---
- name: archlinux base setup
  hosts: all
  become: yes

  tasks:

# ARCH FULL UPDATE  ----------------------------------------------------------

    - name: update arch
      pacman:
        update_cache: yes
        upgrade: yes

# INSTALL VARIOUS PACKAGES  --------------------------------------------------

    - name: install bunch of packages
      pacman:
        update_cache: yes
        name:
          - nano
          - micro
          - git
          - curl
          - wget
          - rsync
          - nnn
          - unarchiver
          - ncdu
          - htop
          - iotop
          - glances
          - iproute2
          - bind
          - borg
          - fuse
          - python-llfuse
          - python-pip
          - python-setuptools
          - python-pexpect

# YAY TO ACCESS AUR REPOSITORY  ----------------------------------------------

    - name: disable need for password for pacman to allow yay install
      lineinfile:
        path: /etc/sudoers.d/temp-allow-no-pswd-pacman
        state: present
        line: "ALL ALL=NOPASSWD: /usr/bin/pacman"
        validate: /usr/sbin/visudo -cf %s
        create: yes

    - name: git clone yay-bin repo in to /tmp
      become: no
      git:
        repo: 'https://aur.archlinux.org/yay-bin.git'
        dest: /tmp/yay-bin
        clone: yes

    - name: install yay using makepkg
      become: no
      expect:
        chdir: /tmp/yay-bin
        command: makepkg -si
        responses:
          (?i)Proceed with installation: "y"

    - name: re-enable need for password for pacman
      file:
        path: /etc/sudoers.d/temp-allow-no-pswd-pacman
        state: absent

# SYSTEM SETTINGS CHANGES ----------------------------------------------------

    - name: enable color in pacman.conf
      lineinfile:
        path: /etc/pacman.conf
        regexp: '^#Color$'
        line: 'Color'

    - name: fstab change relatime to noatime
      replace:
        path: /etc/fstab
        regexp: 'relatime'
        replace: 'noatime'

    - name: change number of failed logins that triger 10min lockout
      lineinfile:
        path: /etc/security/faillock.conf
        regexp: '^# deny = 3$'
        line: 'deny = 10'

# SSH ------------------------------------------------------------------------

    - name: install ssh
      pacman:
        name:
          - openssh

    - name: enable and start ssh service
      systemd:
        name: sshd
        enabled: yes
        state: started

# LOCATE THE QUICK FILE SEARCH------------------------------------------------

    - name: install plocate
      pacman:
        name:
          - plocate

    - name: enable and start ~12h updatedb timer
      systemd:
        name: plocate-updatedb.timer
        enabled: yes
        state: started

# CRONIE  --------------------------------------------------------------------

    - name: install cronie
      pacman:
        name:
          - cronie

    - name: enable and start cronie.service
      systemd:
        name: cronie
        enabled: yes
        state: started

# SSD TRIM SCHEDULED  --------------------------------------------------------

    - name: install util-linux
      pacman:
        name:
          - util-linux

    - name: enable and start weekly ssd disks trim using fstrim timer
      systemd:
        name: fstrim.timer
        enabled: yes
        state: started

# CACHE CLEANER SCHEDULED  ---------------------------------------------------

    - name: install pacman-contrib
      pacman:
        name:
          - pacman-contrib

    - name: enable and start weekly cache cleanup paccache timer
      systemd:
        name: paccache.timer
        enabled: yes
        state: started

# REFLECTOR TO REGULARLY UPDATE MIRRORLIST  ---- CHANGE COUNTRY CODES !!! ----

    - name: install reflector
      pacman:
        name:
          - reflector

    - name: write reflector configuration file
      copy:
        dest: '/etc/xdg/reflector/reflector.conf'
        content: |
          --save /etc/pacman.d/mirrorlist
          --protocol http
          --country SK,CZ,UA
          --score 20
          --sort rate

    - name: enable and start reflector timer
      systemd:
        name: reflector.timer
        enabled: yes
        state: started

    - name: do initial run of reflector.service
      systemd:
        name: reflector
        enabled: yes
        state: started

# SETUP MICRO TEXT EDITOR  ---------------------------------------------------

    - name: install micro text editor
      pacman:
        name:
          - micro

    - name: copy bindings.json and settings.json
      become: no
      copy:
        src: '{{item}}'
        dest: '~/.config/micro/'
        mode: 0644
      loop:
        - ./.config/micro/bindings.json
        - ./.config/micro/settings.json

    - name: set default editor in .bashrc
      become: no
      blockinfile:
        path: ~/.bashrc
        block: |
          export EDITOR=micro
          export VISUAL=micro

# NEOFETCH  ------------------------------------------------------------------

    - name: install neofetch
      pacman:
        name:
          - neofetch

    - name: run neofetch to generate config
      become: no
      command: neofetch

    - name: enable disk info in neofetch
      become: no
      lineinfile:
        path: ~/.config/neofetch/config.conf
        regexp: '.*# info "Disk" disk$'
        line: '    info "Disk" disk'

    - name: enable local IP info in neofetch
      become: no
      lineinfile:
        path: ~/.config/neofetch/config.conf
        regexp: '.*# info "Local IP" local_ip$'
        line: '    info "Local IP" local_ip'

# HYPERV  --------------------------------------------------------------------

    - name: get virtual enviroment info
      command: /usr/bin/systemd-detect-virt
      register: virtualization_type

    - name: if hyperv, install hyperv package
      pacman:
        name:
          - hyperv
      when: virtualization_type.stdout == 'microsoft'

    - name: if hyperv, enable and start hyperv integration services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
          - hv_fcopy_daemon.service
          - hv_kvp_daemon.service
          - hv_vss_daemon.service
      when: virtualization_type.stdout == 'microsoft'

# VMWARE  --------------------------------------------------------------------

    - name: get virtual enviroment info
      command: /usr/bin/systemd-detect-virt
      register: virtualization_type

    - name: if vmware, install open-vm-tools
      pacman:
        name:
          - open-vm-tools
      when: virtualization_type.stdout == 'vmware'

    - name: if vmware, enable and start vmware open tools services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
          - vmtoolsd.service
          - vmware-vmblock-fuse.service
      when: virtualization_type.stdout == 'vmware'

# VIRTUALBOX  ---------------------------------------------------------------

    - name: get virtual enviroment info
      command: /usr/bin/systemd-detect-virt
      register: virtualization_type

    - name: if virtualbox, install guest additions NON-X version
      pacman:
        name:
          - virtualbox-guest-utils-nox
      when: virtualization_type.stdout == 'oracle'

    - name: if virtualbox, enable and start vboxservice
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
          - vboxservice.service
      when: virtualization_type.stdout == 'oracle'

#  ---------------------------------------------------------------------------
